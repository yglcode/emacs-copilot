#!/usr/bin/env bash

args=($@)
copilot_role="${args[0]}"
workspace="${args[1]}"
copilot_file="${args[2]}"
copilot_data_dir=${copilot_file%/*}
logfile="${args[3]}"
unset args[3]
unset args[2]
unset args[1]
unset args[0]
input="${args[@]}"

if [ -z "$copilot_data_dir"] || [ -z "$copilot_file"]; then
    echo "copilot4emacs: unexpected error: invalid copilot data file \"$copilot_data_dir, $copilot_file\""
    return
fi

if [ ! -d $copilot_data_dir ]; then
    mkdir -p $copilot_data_dir
fi

Bin=$(which copilot4emacs)
BinPath=${Bin%/*}

# init copilot state
if [ ! -s "$copilot_file" ]; then
    echo "copilot4emacs($copilot_role): init gptscript chat state" >> $logfile
    gptscript --default-model "$LLMODEL" --disable-cache --disable-tui --chat-state null --save-chat-state-file stdout --workspace "$workspace" --sub-tool $copilot_role $BinPath/copilot4emacs.gpt "do not code this time, just say hi" > $copilot_file 2>> $logfile
fi

# run gptscript copilot
echo "copilot4emacs($copilot_role): run gptscript chat to send to LLM: $input" >> $logfile

chat_state_file="$copilot_data_dir/chat_state.json"
jq .state $copilot_file > $chat_state_file
gptscript --default-model "$LLMODEL" --disable-cache --disable-tui --chat-state "$chat_state_file" --save-chat-state-file stdout --workspace "$workspace" --sub-tool $copilot_role $BinPath/copilot4emacs.gpt $input > "$copilot_file"  2>> $logfile
rm $chat_state_file

echo "copilot4emacs($copilot_role): raw code before cleanup: $(jq -r '.content' $copilot_file)" >> $logfile
jq -r '.content' $copilot_file
